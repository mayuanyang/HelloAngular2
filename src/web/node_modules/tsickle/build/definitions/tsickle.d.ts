import * as ts from 'typescript';
export { convertDecorators } from './decorator-annotator';
export { processES5 as convertCommonJsToGoogModule } from './es5processor';
export interface Options {
    untyped?: boolean;
    logWarning?: (warning: ts.Diagnostic) => void;
}
export interface Output {
    output: string;
    externs: string;
    diagnostics: ts.Diagnostic[];
}
/**
 * Symbols that are already declared as externs in Closure, that should
 * be avoided by tsickle's "declare ..." => externs.js conversion.
 */
export declare let closureExternsBlacklist: string[];
export declare function formatDiagnostics(diags: ts.Diagnostic[]): string;
/**
 * TypeScript has an API for JSDoc already, but it's not exposed.
 * https://github.com/Microsoft/TypeScript/issues/7393
 * For now we create types that are similar to theirs so that migrating
 * to their API will be easier.  See e.g. ts.JSDocTag and ts.JSDocComment.
 */
export interface JSDocTag {
    tagName?: string;
    parameterName?: string;
    type?: string;
    optional?: boolean;
    restParam?: boolean;
    destructuring?: boolean;
    text?: string;
}
export interface JSDocComment {
    tags: JSDocTag[];
}
/**
 * getJSDocAnnotation parses JSDoc out of a comment string.
 * Returns null if comment is not JSDoc.
 */
export declare function getJSDocAnnotation(comment: string): JSDocComment;
export declare function annotate(program: ts.Program, file: ts.SourceFile, options?: Options): Output;
